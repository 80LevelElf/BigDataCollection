{
  "name": "Bigio",
  "tagline": "Special .Net collections adapted for huge amount of elements",
  "body": "### What is Bigio used for?\r\n\r\nBigio is a several collections special adapted to store a lot of elements.\r\nStandard List<T> and LinkedList<T> is great choice for the most of cases, but they become useless if you have to work with thousands and millions of elements because of:<br />\r\n1. Ineffective operations because of structure of List<T> and LinkedList<T><br />\r\n2. Memory overhead of that system collections.<br />\r\n\r\n### Getting started\r\nThere is no nuget-package of Bigio library at this moment, because it still in active development.<br />\r\nIf you want to use it you have to clone repository:<br />\r\nJust copy-past that in git client: `git clone https://github.com/80LevelElf/Bigio.git`<br />\r\nOr download [zip file](https://github.com/80LevelElf/Bigio/zipball/master) with repository\r\nThen open downloaded folder, move to 'bin' folder and copy 'Bigio.dll' file to your project working directory.<br />\r\nThen just [specify reference](https://msdn.microsoft.com/en-us/library/wkze6zky.aspx) to Bigio.dll from needed projects.\r\n\r\n\r\n### Structure of Bigio\r\nAt this moment Bigio consist of this main parts: <br />\r\n1. BigArray <br />\r\n2. BigQueue <br />\r\n3. BigStack <br />\r\nClick to move into separate wiki pages of each collection.\r\n\r\n### Quck start\r\nAll Bigio collections use familiar API and interfaces to make work with it easy. <br />\r\nAPI of 'BigList' quite similar to system 'List' API, for example: <br />\r\n\r\nInsert million elements to random positions: <br />\r\n\r\n    var list = new BigArray<int>();\r\n    Random random = new Random();\r\n\r\n    for (int i = 0; i < 1000000; i++)\r\n    {\r\n        list.Insert(random .Next(list.Count), i);\r\n    }\r\n\r\nAfter that we can find index of some element:\r\n\r\n    list.IndexOf(random.Next(list.Count));\r\n\r\nRemove last entry of some element:\r\n\r\n    list.RemoveLast(random.Next(list.Count));\r\n\r\nOr find first event element with LINQ(or `default(T)` if all elements are odd):\r\n\r\n    var firstEven = list.FirstOrDefault(i => i % 2 == 0);\r\n\r\n### Is there any alternative solutions?\r\nOf course they are! The most famous alternative is [Wintellect's Power Collections](https://powercollections.codeplex.com) of Wintellect company. It's great solution developed by clever people, but in most of cases Bigio will be faster:<br />\r\n`All search estimations measured for collections with 1.000.000 elements.`<br />\r\nWe compare `Bigio.BigArray<T>` and `PowerCollections.BigList<T>`\r\n> **Estimation much be different in different computers(depend on processor and count of cores inside it), compilers and the phases of the moon.**<br />\r\n\r\n#####Search:\r\nIndexOf(item):\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List |\r\n|------------|-------|------------|----------------|\r\n| 10         | 1     | 1          | 0              |\r\n| 100        | 0     | 0          | 8              |\r\n| 1000       | 1     | 28         | 0              |\r\n| 10000      | 57    | 2503       | 62             |\r\n\r\nLastIndexOf(item):\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List |\r\n|------------|-------|------------|----------------|\r\n| 1          | 4     | 229        | 2              |\r\n| 2          | 2     | 438        | 1              |\r\n| 5          | 8     | 1117       | 6              |\r\n| 10         | 16    | 2883       | 15             |\r\n\r\nFind(predicate):\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List |\r\n|------------|-------|------------|----------------|\r\n| 10         | 0     | 0          | 0              |\r\n| 100        | 0     | 0          | 0              |\r\n| 1000       | 3     | 39         | 6              |\r\n| 10000      | 398   | 3126       | 295            |\r\n\r\nFindLast(predicate):\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List |\r\n|------------|-------|------------|----------------|\r\n| 1          | 20    | 275        | 4              |\r\n| 2          | 12    | 790        | 7              |\r\n| 5          | 35    | 1550       | 17             |\r\n| 10         | 142   | 2669       | 44             |\r\n\r\nFindAll(predicate):\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List |\r\n|------------|-------|------------|----------------|\r\n| 2          | 43    | 228        | 9              |\r\n| 5          | 140   | 1480       | 75             |\r\n| 7          | 309   | 2669       | 158            |\r\n\r\n#####Adding and insertions:\r\n\r\nAdd(item):\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List |\r\n|------------|-------|------------|----------------|\r\n| 10000      | 0     | 0          | 0              |\r\n| 100000     | 13    | 4          | 0              |\r\n| 1000000    | 100   | 59         | 5              |\r\n| 10000000   | 1162  | 629        | 58             |\r\n| 100000000  | 12468 | 6087       | 588            |\r\n\r\nInsert(item) in the **start** position:\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List        |\r\n|------------|-------|------------|-----------------------|\r\n| 100        | 1     | 0          | 0                     |\r\n| 1000       | 0     | 0          | 0                     |\r\n| 10000      | 9     | 1          | 17                    |\r\n| 100000     | 60    | 17         | 1579                  |\r\n| 1000000    | 642   | 203        | until the end of time |\r\n| 10000000   | 7805  | 2422       | until the end of time |\r\n\r\nInsert(item) in the **middle** position:\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List |\r\n|------------|-------|------------|----------------|\r\n| 100        | 1     | 1          | 0              |\r\n| 1000       | 0     | 8          | 0              |\r\n| 10000      | 12    | 130        | 3              |\r\n| 100000     | 83    | 15385      | 489            |\r\n\r\nInsert(item) in the **random** position:\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List                               |\r\n|------------|-------|------------|----------------------------------------------|\r\n| 100        | 1     | 0          | 0                                            |\r\n| 1000       | 0     | 0          | 0                                            |\r\n| 10000      | 12    | 8          | 7                                            |\r\n| 100000     | 110   | 135        | 1471                                         |\r\n| 1000000    | 2095  | 3001       | If you wait for the end - tell me the result |\r\n\r\nAddRange(range):\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List |\r\n|------------|-------|------------|----------------|\r\n| 1000       | 0     | 1          | 0              |\r\n| 10000      | 19    | 17         | 14             |\r\n| 100000     | 154   | 254        | 127            |\r\n| 1000000    | 1503  | 2239       | 1138           |\r\n\r\nInsertRange(range) in **random** position:\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List   |\r\n|------------|-------|------------|------------------|\r\n| 100        | 0     | 0          | 0                |\r\n| 1000       | 1     | 3          | 1                |\r\n| 10000      | 37    | 78         | 107              |\r\n| 100000     | 489   | 673        | We'll never know |\r\n\r\n#####Other:\r\n\r\nBinarySearch(item, 0, collectionLength)\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List |\r\n|------------|-------|------------|----------------|\r\n| 100        | 0     | 4          | 0              |\r\n| 1000       | 6     | 8          | 1              |\r\n| 10000      | 73    | 107        | 5              |\r\n| 100000     | 908   | 1197       | 71             |\r\n\r\nForeach through full collection\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List |\r\n|------------|-------|------------|----------------|\r\n| 1          | 63    | 108        | 25             |\r\n| 5          | 810   | 1508       | 276            |\r\n| 10         | 2701  | 4593       | 1141           |\r\n\r\nFor through full collection\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List |\r\n|------------|-------|------------|----------------|\r\n| 1          | 1046  | 789        | 23             |\r\n| 4          | 12638 | 7838       | 232            |\r\n\r\nReverse() all elements\r\n\r\n| Iterations | Bigio | Wintellect | Microsoft List |\r\n|------------|-------|------------|----------------|\r\n| 1          | 1     | 1299       | 0              |\r\n| 5          | 24    | -          | 19             |\r\n| 10         | 69    | -          | 46             |\r\n| 15         | 150   | -          | 94             |\r\n\r\nMemory estimation (memory size of process with only one collection):\r\n\r\n| Count of elements | Bigio    | Wintellect | Microsoft List |\r\n|-------------------|----------|------------|----------------|\r\n| 10000000          | 59.8 Mb  | 73.3 Mb    | 106.3 Mb       |\r\n| 100000000         | 620 Mb   | 689.5 Mb   | 641 Mb         |\r\n| 1000000000        | 6 241 Mb | 6 955 Mb   | Out of memory  |\r\n\r\nAs you can see Bigio give you much faster and smaller solution for big collection than PowerCollections.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}